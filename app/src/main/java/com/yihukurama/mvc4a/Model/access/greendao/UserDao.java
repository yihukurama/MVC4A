package com.yihukurama.mvc4a.model.access.greendao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table USER.
*/
public class UserDao extends AbstractDao<User, Long> {

    public static final String TABLENAME = "USER";

    /**
     * Properties of entity User.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Index = new Property(0, Long.class, "index", true, "INDEX");
        public final static Property AICHAID = new Property(1, String.class, "AICHAID", false, "AICHAID");
        public final static Property MOBILE = new Property(2, String.class, "MOBILE", false, "MOBILE");
        public final static Property HEAD_URL = new Property(3, String.class, "HEAD_URL", false, "HEAD__URL");
        public final static Property NICKNAME = new Property(4, String.class, "NICKNAME", false, "NICKNAME");
        public final static Property EMAIL = new Property(5, String.class, "EMAIL", false, "EMAIL");
        public final static Property QRCODE = new Property(6, String.class, "QRCODE", false, "QRCODE");
        public final static Property SEX = new Property(7, String.class, "SEX", false, "SEX");
        public final static Property ZONE = new Property(8, String.class, "ZONE", false, "ZONE");
        public final static Property SIGN = new Property(9, String.class, "SIGN", false, "SIGN");
    };


    public UserDao(DaoConfig config) {
        super(config);
    }
    
    public UserDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'USER' (" + //
                "'INDEX' INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: index
                "'AICHAID' TEXT NOT NULL UNIQUE ," + // 1: AICHAID
                "'MOBILE' TEXT," + // 2: MOBILE
                "'HEAD__URL' TEXT," + // 3: HEAD_URL
                "'NICKNAME' TEXT," + // 4: NICKNAME
                "'EMAIL' TEXT," + // 5: EMAIL
                "'QRCODE' TEXT," + // 6: QRCODE
                "'SEX' TEXT," + // 7: SEX
                "'ZONE' TEXT," + // 8: ZONE
                "'SIGN' TEXT);"); // 9: SIGN
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'USER'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, User entity) {
        stmt.clearBindings();
 
        Long index = entity.getIndex();
        if (index != null) {
            stmt.bindLong(1, index);
        }
        stmt.bindString(2, entity.getAICHAID());
 
        String MOBILE = entity.getMOBILE();
        if (MOBILE != null) {
            stmt.bindString(3, MOBILE);
        }
 
        String HEAD_URL = entity.getHEAD_URL();
        if (HEAD_URL != null) {
            stmt.bindString(4, HEAD_URL);
        }
 
        String NICKNAME = entity.getNICKNAME();
        if (NICKNAME != null) {
            stmt.bindString(5, NICKNAME);
        }
 
        String EMAIL = entity.getEMAIL();
        if (EMAIL != null) {
            stmt.bindString(6, EMAIL);
        }
 
        String QRCODE = entity.getQRCODE();
        if (QRCODE != null) {
            stmt.bindString(7, QRCODE);
        }
 
        String SEX = entity.getSEX();
        if (SEX != null) {
            stmt.bindString(8, SEX);
        }
 
        String ZONE = entity.getZONE();
        if (ZONE != null) {
            stmt.bindString(9, ZONE);
        }
 
        String SIGN = entity.getSIGN();
        if (SIGN != null) {
            stmt.bindString(10, SIGN);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public User readEntity(Cursor cursor, int offset) {
        User entity = new User( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // index
            cursor.getString(offset + 1), // AICHAID
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // MOBILE
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // HEAD_URL
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // NICKNAME
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // EMAIL
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // QRCODE
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // SEX
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // ZONE
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9) // SIGN
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, User entity, int offset) {
        entity.setIndex(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setAICHAID(cursor.getString(offset + 1));
        entity.setMOBILE(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setHEAD_URL(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setNICKNAME(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setEMAIL(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setQRCODE(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setSEX(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setZONE(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setSIGN(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(User entity, long rowId) {
        entity.setIndex(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(User entity) {
        if(entity != null) {
            return entity.getIndex();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
